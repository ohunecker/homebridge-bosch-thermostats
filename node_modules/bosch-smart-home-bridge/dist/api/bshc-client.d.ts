import { Logger } from '../logger';
import { CertificateStorage } from '../certificate-storage';
import { Observable } from 'rxjs';
import { AbstractBshcClient } from './abstract-bshc-client';
import { BshbResponse } from "../bshb-response";
import { BshbCallOptions } from "../bshb-call-options";
/**
 * This client contains some basic calls which are available to contact Bosch Smart Home Controller (BSHC)
 * the method {@link BshcClient#call} is not a predefined call and allows to specify it in more detail
 *
 * @author Christopher Holomek
 * @since 26.09.2019
 */
export declare class BshcClient extends AbstractBshcClient {
    private certificateStorage;
    private static COMMON_PORT;
    private static PATH_PREFIX;
    /**
     * Create a new instance of the Bosch Smart Home Controller Client
     *
     * @param host
     *        host name / ip address of BSHC
     * @param certificateStorage
     *        instance of certificate storage
     * @param logger
     *        logger to use
     */
    constructor(host: string, certificateStorage: CertificateStorage, logger: Logger);
    private getOptions;
    /**
     * Get information about BSHC
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getInformation(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get all rooms stored
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getRooms(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Same as {@link BshcClient#getDevice()}
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getDevices(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get all devices
     * @return bshb response object
     */
    getDevice(): Observable<BshbResponse<any[]>>;
    /**
     * Get a specified device
     * @param deviceId
     *        identifier of the device interested in. If undefined all devices are returned
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getDevice(deviceId: string | undefined, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get all available service ids of a specified device
     * @param deviceId identifier of a device
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return a string array which contains all service ids of a device
     */
    getDeviceServiceIds(deviceId: string, bshbCallOptions?: BshbCallOptions): Observable<string[]>;
    /**
     * Get supported device types
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getSupportedDeviceTypes(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get services of all devices
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getDevicesServices(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get all services of all devices
     * @return bshb response object
     */
    getDeviceServices(): Observable<BshbResponse<any[]>>;
    /**
     * Get all services of a specified device
     * @param deviceId identifier of the relevant device
     * @return bshb response object
     */
    getDeviceServices(deviceId: string): Observable<BshbResponse<any[]>>;
    /**
     * Get all services of a specified device
     * @param deviceId identifier of the relevant device
     * @param serviceId <code>'all'</code> to get all services
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getDeviceServices(deviceId: string | undefined, serviceId: 'all', bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get a specified service of a specified device
     * @param deviceId identifier of the relevant device
     * @param serviceId identifier of a service
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getDeviceServices(deviceId: string | undefined, serviceId: string | undefined, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get all scenarios
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getScenarios(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Trigger the specified scenario
     * @param scenarioId
     *        identifier of a scenario
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    triggerScenario(scenarioId: string, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get alarm state
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getAlarmState(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Set alarm state
     * @param armed
     *        <code>true</code> if alarm should be armed. Otherwise <code>false</code>
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    setAlarmState(armed: boolean, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get alarm state
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getPresenceSimulation(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Set alarm state
     * @param enable
     *        <code>true</code> if presence is enabled. Otherwise <code>false</code>
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    setPresenceSimulation(enable: boolean, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Tell BSHC to set a new value for a specified state. Use the device service path to identify the state
     * @param path
     *        device service path to use
     * @param data
     *        data to send. Will be converted to json. It must contain @type otherwise BSHC will not understand the request
     *        (see https://apidocs.bosch-smarthome.com/local/).
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    putState(path: string, data: any, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get all connected clients
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getClients(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Get all messages
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getMessages(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any[]>>;
    /**
     * Delete all specified message ids
     * @param ids
     *        an array of identifier of messages
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    deleteMessages(ids: string[], bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get the specified message
     * @param id
     *        identifier of a message
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    getMessage(id: string, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Delete a specified message
     * @param id
     *        identifier of a message
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     * @return bshb response object
     */
    deleteMessage(id: string, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Get status of windows/doors
     * @param bshbCallOptions
     */
    getOpenWindows(bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<any>>;
    /**
     * Subscribe to listen to notifications of bshc
     *
     * @return an object which contains 'result' which is the subscriptionId and 'jsonrpc' which is the json-rpc version
     */
    subscribe(): Observable<BshbResponse<{
        result: string;
        jsonrpc: string;
    }>>;
    /**
     * Start long polling after subscription. Request is kept open for 30 seconds.
     *
     * @param subscriptionId
     *        identifier from subscription request
     *
     * @param subscriptionId
     */
    longPolling(subscriptionId: string): Observable<BshbResponse<{
        result: any[];
        jsonrpc: string;
    }>>;
    /**
     * Start long polling after subscription. Time a request is kept open can be specified by timeout value.
     * This time is transmitted to BSHC and will be considered by it.
     * Actual client timeout will be extended by 1s in favour of network delays.
     *
     * @param subscriptionId
     *        identifier from subscription request
     * @param timeout
     *        time (ms) for how long the request is kept open. Default is 30000 ms
     */
    longPolling(subscriptionId: string, timeout: number): Observable<BshbResponse<{
        result: any[];
        jsonrpc: string;
    }>>;
    /**
     * Stop subscription
     *
     * @param subscriptionId
     *        identifier from subscription request
     */
    unsubscribe(subscriptionId: string): Observable<BshbResponse<{
        result: null;
        jsonrpc: string;
    }>>;
    /**
     * Not defined call to BSHC in case something is missing here
     * @param port
     *        port to use
     * @param method
     *        HTTP method to use
     * @param path
     *        url path to use
     * @param data
     *        data to send. Will be converted to json. It must contain @type otherwise BSHC will not understand the request.
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     */
    call<T>(port: number, method: string, path: string, data?: any, bshbCallOptions?: BshbCallOptions): Observable<BshbResponse<T>>;
}
