"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var bosch_client_data_1 = require("../model/bosch-client-data");
var rxjs_1 = require("rxjs");
var abstract_bshc_client_1 = require("./abstract-bshc-client");
/**
 * This client is only used for the pairing of the client to Bosch Smart Home Controller.
 *
 * @author Christopher Holomek
 * @since 26.09.2019
 */
var PairingClient = /** @class */ (function (_super) {
    __extends(PairingClient, _super);
    /**
     * Create a new {@link PairingClient}
     * @param host
     *        host name / ip address of BSHC
     * @param logger
     *        logger to use
     */
    function PairingClient(host, logger) {
        return _super.call(this, host, logger) || this;
    }
    /**
     * Send a pairing request to BSHC
     *
     * @param identifier
     *        unique identifier of certificate / client
     * @param name
     *        name of the client (will be displayed in BSH app
     * @param certificate
     *        CertificateDefinition to use (base64 encoded with header / footer)
     * @param systemPassword
     *        system password of BSHC
     * @param bshbCallOptions
     *        define custom headers, etc. Some values may be overwritten. E.g. host
     */
    PairingClient.prototype.sendPairingRequest = function (identifier, name, certificate, systemPassword, bshbCallOptions) {
        var _this = this;
        var clientData = new bosch_client_data_1.BoschClientData(name, identifier, certificate);
        var postData = JSON.stringify(clientData);
        return new rxjs_1.Observable(function (subscriber) {
            _this.simpleCall(PairingClient.PAIR_PORT, 'POST', PairingClient.PAIR_PATH, postData, { systemPassword: systemPassword, bshbCallOptions: bshbCallOptions }).subscribe(function (value) {
                subscriber.next(value);
                subscriber.complete();
            }, function (error) {
                subscriber.error(error);
                // we do not complete here on purpose!
            });
        });
    };
    PairingClient.PAIR_PATH = '/smarthome/clients';
    return PairingClient;
}(abstract_bshc_client_1.AbstractBshcClient));
exports.PairingClient = PairingClient;
