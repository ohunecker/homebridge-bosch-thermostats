"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A default implementation of the {@link Logger} which is using {@link console}
 *
 * @author Christopher Holomek
 * @since 26.09.2019
 */
var DefaultLogger = /** @class */ (function () {
    function DefaultLogger() {
    }
    DefaultLogger.prototype.fine = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        DefaultLogger.log.apply(DefaultLogger, __spreadArrays(['debug', message], optionalParams));
    };
    DefaultLogger.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        DefaultLogger.log.apply(DefaultLogger, __spreadArrays(['debug', message], optionalParams));
    };
    DefaultLogger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        DefaultLogger.log.apply(DefaultLogger, __spreadArrays(['info', message], optionalParams));
    };
    DefaultLogger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        DefaultLogger.log.apply(DefaultLogger, __spreadArrays(['warn', message], optionalParams));
    };
    DefaultLogger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        DefaultLogger.log.apply(DefaultLogger, __spreadArrays(['error', message], optionalParams));
    };
    DefaultLogger.log = function (msgType, message) {
        var optionalParams = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            optionalParams[_i - 2] = arguments[_i];
        }
        if (message) {
            if (optionalParams.length > 0) {
                console[msgType](message, optionalParams);
            }
            else {
                console[msgType](message);
            }
        }
        else {
            if (optionalParams.length > 0) {
                console[msgType](optionalParams);
            }
            else {
                console[msgType]();
            }
        }
    };
    return DefaultLogger;
}());
exports.DefaultLogger = DefaultLogger;
