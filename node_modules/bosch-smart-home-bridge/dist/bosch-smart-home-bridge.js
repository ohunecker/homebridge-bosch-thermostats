"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pairing_client_1 = require("./api/pairing-client");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var bshc_client_1 = require("./api/bshc-client");
var certificate_storage_1 = require("./certificate-storage");
/**
 * The {@link BoschSmartHomeBridge} (BSHB) allows communication to Bosch Smart Home Controller (BSHC).
 * To allow communication BHSB needs to pair to BSHC.
 *
 * @author Christopher Holomek
 * @since 26.09.2019
 */
var BoschSmartHomeBridge = /** @class */ (function () {
    /**
     * Create a new instance for communication with BSHC
     *
     * @param bshbBuilder
     *        builder used to create an instance
     */
    function BoschSmartHomeBridge(bshbBuilder) {
        this.host = bshbBuilder.host;
        this.logger = bshbBuilder.logger;
        this.certificateStorage = new certificate_storage_1.CertificateStorage(bshbBuilder.clientCert, bshbBuilder.clientPrivateKey);
        this.pairingClient = new pairing_client_1.PairingClient(this.host, this.logger);
        this.bshcClient = new bshc_client_1.BshcClient(this.host, this.certificateStorage, this.logger);
        // remove sensitive data from builder
        bshbBuilder.withClientCert("");
        bshbBuilder.withClientPrivateKey("");
    }
    /**
     * get BSHC client after pairing which allows actual communication with BSHC
     * @return BSHC client
     */
    BoschSmartHomeBridge.prototype.getBshcClient = function () {
        return this.bshcClient;
    };
    /**
     * Pair to BSHC if not already paired.
     *
     * @param name
     *        name of the client if pairing is necessary. "OSS " prefix is added automatically
     * @param identifier
     *        identifier to use. "oss_" prefix is added automatically.
     * @param systemPassword
     *        system password of BSHC which is needed for pairing
     * @param pairingDelay
     *        delay during pairing. This will give the user some time to press the pairing button on BSHC
     * @param pairingAttempts
     *        attempts of pairing in case it is failing because pairing button not pressed on BSHC
     * @return the response object after pairing or undefined if already paired
     */
    BoschSmartHomeBridge.prototype.pairIfNeeded = function (name, identifier, systemPassword, pairingDelay, pairingAttempts) {
        var _this = this;
        if (pairingDelay === void 0) { pairingDelay = 5000; }
        if (pairingAttempts === void 0) { pairingAttempts = 50; }
        return new rxjs_1.Observable(function (observer) {
            _this.logger.info("Check if client with identifier: " + identifier + " is already paired.");
            _this.bshcClient.getRooms().subscribe(function () {
                _this.logger.info("Client with identifier: " + identifier + " already paired. Using existing certificate");
                observer.next();
                observer.complete();
            }, function (testConnectionError) {
                _this.logger.fine('Error during call to test if already paired.', testConnectionError);
                _this.logger.info("Client with identifier: " + identifier + " was not paired yet.");
                _this.pairClient(name, identifier, systemPassword, pairingDelay, pairingAttempts).subscribe(function (value) {
                    observer.next(value);
                    observer.complete();
                }, function (error) {
                    observer.error(error);
                    observer.complete();
                });
            });
        });
    };
    BoschSmartHomeBridge.prototype.pairClient = function (name, identifier, systemPassword, pairingDelay, pairingAttempts) {
        var _this = this;
        return new rxjs_1.Observable(function (observer) {
            _this.logger.info('Start pairing. Activate pairing on Bosch Smart Home Controller by pressing button until flashing.');
            _this.pairingClient.sendPairingRequest(identifier, name, _this.certificateStorage.clientCert, systemPassword)
                .pipe(operators_1.retryWhen(function (errors) { return errors.pipe(operators_1.concatMap(function (e, i) { return rxjs_1.iif(function () { return i > pairingAttempts; }, rxjs_1.throwError(e), rxjs_1.of(e).pipe(operators_1.tap(function () { return _this.logger.warn("Could not pair client. Did you press the paring button? Error details: " + e.cause); }), operators_1.delay(pairingDelay))); })); }))
                .subscribe(function (value) {
                if (value.incomingMessage.statusCode === 201) {
                    _this.logger.info('Pairing successful.');
                }
                else {
                    _this.logger.info('Unexpected pairing response. Most likely wrong input data. Check password, etc. Pairing stopped.');
                }
                observer.next(value);
                observer.complete();
            }, function (error) {
                _this.logger.warn("Could not pair client. Did you press the paring button on Bosch Smart Home Controller? Error details: " + error.cause);
                observer.error(error);
            });
        });
    };
    return BoschSmartHomeBridge;
}());
exports.BoschSmartHomeBridge = BoschSmartHomeBridge;
